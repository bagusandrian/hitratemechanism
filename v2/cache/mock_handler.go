// Code generated by mockery v2.23.2. DO NOT EDIT.

package cache

import (
	context "context"

	model "github.com/bagusandrian/hitratemechanism/v2/model"
	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

// CacheValidateTrend provides a mock function with given fields: ctx, req
func (_m *MockHandler) CacheValidateTrend(ctx context.Context, req model.RequestCheck) model.Response {
	ret := _m.Called(ctx, req)

	var r0 model.Response
	if rf, ok := ret.Get(0).(func(context.Context, model.RequestCheck) model.Response); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.Response)
	}

	return r0
}

// cacheGetDataTrend provides a mock function with given fields: ctx, key
func (_m *MockHandler) cacheGetDataTrend(ctx context.Context, key string) (model.DataTimeTrend, error) {
	ret := _m.Called(ctx, key)

	var r0 model.DataTimeTrend
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.DataTimeTrend, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.DataTimeTrend); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(model.DataTimeTrend)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// cacheSetDataTrend provides a mock function with given fields: ctx, req, value
func (_m *MockHandler) cacheSetDataTrend(ctx context.Context, req model.RequestCheck, value model.DataTimeTrend) {
	_m.Called(ctx, req, value)
}

// calculateRPS provides a mock function with given fields: timeTrend
func (_m *MockHandler) calculateRPS(timeTrend map[int64]int64) int64 {
	ret := _m.Called(timeTrend)

	var r0 int64
	if rf, ok := ret.Get(0).(func(map[int64]int64) int64); ok {
		r0 = rf(timeTrend)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// generateKey provides a mock function with given fields: ctx, key
func (_m *MockHandler) generateKey(ctx context.Context, key string) string {
	ret := _m.Called(ctx, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewMockHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockHandler(t mockConstructorTestingTNewMockHandler) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
